async ${targetObjName}(obj, args, context, ast) {
  if (obj.${targetObjName}) {
    return obj.${targetObjName}.map(cleanUpResult);
  }

  let db = await context.__mongodb;
  let pipeline = [
    {
      $match: {
        _id: obj._id
      }
    },
    {
      $lookup: {
        from: "${table}",
        let: { ${fkField}: "$${fkField}" },
        pipeline: [
          {
            $match: {
              $expr: { $eq: ["$${keyField}", "$$${fkField}"] }
            }
          },
          ${args.FILTER ? `{ $match: ${JSON.stringify(args.FILTER)} },` : ''}
          ${args.SORT ? `{ $sort: ${JSON.stringify(args.SORT)} },` : ''}
          ${args.SKIP ? `{ $skip: ${args.SKIP} },` : ''}
          ${args.LIMIT ? `{ $limit: ${args.LIMIT} },` : ''}
          {
            $project: ${JSON.stringify($project)}
          }
        ],
        as: "${targetObjName}"
      }
    },
    {
      $project: {
        ${targetObjName}: 1
      }
    }
  ];

  let results = await db.collection("${sourceTable}").aggregate(pipeline).toArray();
  let ${targetObjName} = results[0]?.${targetObjName} || [];

  return ${targetObjName}.map(cleanUpResult);
}

async ${targetObjName}Meta(obj, args, context, ast) {
  let db = await context.__mongodb;
  let pipeline = [
    {
      $match: {
        _id: obj._id
      }
    },
    {
      $lookup: {
        from: "${table}",
        let: { ${fkField}: "$${fkField}" },
        pipeline: [
          {
            $match: {
              $expr: { $eq: ["$${keyField}", "$$${fkField}"] }
            }
          },
          ${args.FILTER ? `{ $match: ${JSON.stringify(args.FILTER)} },` : ''}
          {
            $count: "count"
          }
        ],
        as: "${targetObjName}Count"
      }
    },
    {
      $project: {
        count: { $arrayElemAt: ["$${targetObjName}Count.count", 0] }
      }
    }
  ];

  let results = await db.collection("${sourceTable}").aggregate(pipeline).toArray();
  return { count: results[0]?.count || 0 };
}